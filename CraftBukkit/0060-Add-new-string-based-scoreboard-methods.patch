From ed620922cc731240382a7d503cf796ecac644743 Mon Sep 17 00:00:00 2001
From: mrapple <tony@oc.tc>
Date: Thu, 17 Apr 2014 21:07:25 -0500
Subject: [PATCH] Add new string based scoreboard methods

Getting/working with OfflinePlayers is officially broken in 1.7 and up. Warn users not to use them and provide string alternatives.

diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftObjective.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftObjective.java
index 97cb517..7cc862f 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftObjective.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftObjective.java
@@ -5,6 +5,7 @@ import net.minecraft.server.ScoreboardObjective;
 
 import org.apache.commons.lang.Validate;
 import org.bukkit.OfflinePlayer;
+import org.bukkit.entity.Player;
 import org.bukkit.scoreboard.DisplaySlot;
 import org.bukkit.scoreboard.Objective;
 import org.bukkit.scoreboard.Score;
@@ -88,9 +89,9 @@ public final class CraftObjective extends CraftScoreboardComponent implements Ob
 
     public Score getScore(OfflinePlayer player) throws IllegalArgumentException, IllegalStateException {
         Validate.notNull(player, "Player cannot be null");
-        CraftScoreboard scoreboard = checkState();
+        Validate.isTrue(player instanceof Player, CraftScoreboard.warningMessage);
 
-        return new CraftScore(this, player.getName());
+        return this.getScore(player.getName());
     }
 
     public Score getScore(String entry) throws IllegalArgumentException, IllegalStateException {
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScore.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScore.java
index 5d523d8..00a0ae4 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScore.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScore.java
@@ -5,6 +5,7 @@ import java.util.Map;
 import net.minecraft.server.Scoreboard;
 import net.minecraft.server.ScoreboardScore;
 
+import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.OfflinePlayer;
 import org.bukkit.scoreboard.Objective;
@@ -26,7 +27,9 @@ public final class CraftScore implements Score {
     }
 
     public OfflinePlayer getPlayer() {
-        return Bukkit.getOfflinePlayer(entry);
+        Validate.isTrue(false, CraftScoreboard.warningMessage);
+
+        return null;
     }
 
     public String getEntry() {
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java
index ad65b3f..480f99b 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java
@@ -9,6 +9,7 @@ import net.minecraft.server.ScoreboardTeam;
 
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
+import org.bukkit.entity.Player;
 import org.bukkit.OfflinePlayer;
 import org.bukkit.scoreboard.DisplaySlot;
 import org.bukkit.scoreboard.Objective;
@@ -21,6 +22,7 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
     final Scoreboard board;
     final Map<String, CraftObjective> objectives = new HashMap<String, CraftObjective>();
     final Map<String, CraftTeam> teams = new HashMap<String, CraftTeam>();
+    public static final String warningMessage = "WARNING: OfflinePlayer lookups are blocking and unsupported in SportBukkit. Please either use online players or the new string methods.";
 
     CraftScoreboard(Scoreboard board) {
         this.board = board;
@@ -76,10 +78,11 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
 
     public ImmutableSet<Score> getScores(OfflinePlayer player) throws IllegalArgumentException {
         Validate.notNull(player, "OfflinePlayer cannot be null");
+        Validate.isTrue(player instanceof Player, CraftScoreboard.warningMessage);
 
         ImmutableSet.Builder<Score> scores = ImmutableSet.builder();
         for (CraftObjective objective : objectives.values()) {
-            scores.add(objective.getScore(player));
+            scores.add(objective.getScore(player.getName()));
         }
         return scores.build();
     }
@@ -96,6 +99,7 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
 
     public void resetScores(OfflinePlayer player) throws IllegalArgumentException {
         Validate.notNull(player, "OfflinePlayer cannot be null");
+        Validate.isTrue(player instanceof Player, CraftScoreboard.warningMessage);
 
         board.resetPlayerScores(player.getName());
     }
@@ -108,8 +112,15 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
 
     public Team getPlayerTeam(OfflinePlayer player) throws IllegalArgumentException {
         Validate.notNull(player, "OfflinePlayer cannot be null");
+        Validate.isTrue(player instanceof Player, CraftScoreboard.warningMessage);
 
-        ScoreboardTeam team = board.getPlayerTeam(player.getName());
+        return this.getPlayerTeam(player.getName());
+    }
+
+    public Team getPlayerTeam(String entry) throws IllegalArgumentException {
+        Validate.notNull(entry, "Entry cannot be null");
+
+        ScoreboardTeam team = board.getPlayerTeam(entry);
         return team == null ? null : teams.get(team.getName());
     }
 
@@ -132,11 +143,9 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
     }
 
     public ImmutableSet<OfflinePlayer> getPlayers() {
-        ImmutableSet.Builder<OfflinePlayer> players = ImmutableSet.builder();
-        for (Object playerName : board.getPlayers()) {
-            players.add(Bukkit.getOfflinePlayer(playerName.toString()));
-        }
-        return players.build();
+        Validate.isTrue(false, CraftScoreboard.warningMessage);
+
+        return null;
     }
 
     public ImmutableSet<String> getEntries() {
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
index 68a0009..59bff0b 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
@@ -4,6 +4,7 @@ import java.util.Set;
 
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
+import org.bukkit.entity.Player;
 import org.bukkit.OfflinePlayer;
 import org.bukkit.scoreboard.Team;
 
@@ -93,13 +94,20 @@ public final class CraftTeam extends CraftScoreboardComponent implements Team {
     }
 
     public Set<OfflinePlayer> getPlayers() throws IllegalStateException {
+        Validate.isTrue(false, CraftScoreboard.warningMessage);
+
+        return null;
+    }
+
+    public Set<String> getEntries() throws IllegalStateException {
         CraftScoreboard scoreboard = checkState();
 
-        ImmutableSet.Builder<OfflinePlayer> players = ImmutableSet.builder();
+        ImmutableSet.Builder<String> entries = ImmutableSet.builder();
         for (Object o : team.getPlayerNameSet()) {
-            players.add(Bukkit.getOfflinePlayer(o.toString()));
+            entries.add(o.toString());
         }
-        return players.build();
+
+        return entries.build();
     }
 
     public int getSize() throws IllegalStateException {
@@ -110,28 +118,49 @@ public final class CraftTeam extends CraftScoreboardComponent implements Team {
 
     public void addPlayer(OfflinePlayer player) throws IllegalStateException, IllegalArgumentException {
         Validate.notNull(player, "OfflinePlayer cannot be null");
+        Validate.isTrue(player instanceof Player, CraftScoreboard.warningMessage);
+
+        this.add(player.getName());
+    }
+
+    public void add(String entry) throws IllegalStateException, IllegalArgumentException {
+        Validate.notNull(entry, "Entry cannot be null");
         CraftScoreboard scoreboard = checkState();
 
-        scoreboard.board.addPlayerToTeam(player.getName(), team.getName());
+        scoreboard.board.addPlayerToTeam(entry, team.getName());
     }
 
     public boolean removePlayer(OfflinePlayer player) throws IllegalStateException, IllegalArgumentException {
         Validate.notNull(player, "OfflinePlayer cannot be null");
+        Validate.isTrue(player instanceof Player, CraftScoreboard.warningMessage);
+
+        return this.remove(player.getName());
+    }
+
+    public boolean remove(String entry) throws IllegalStateException, IllegalArgumentException {
+        Validate.notNull(entry, "Entry cannot be null");
         CraftScoreboard scoreboard = checkState();
 
-        if (!team.getPlayerNameSet().contains(player.getName())) {
+        if (!team.getPlayerNameSet().contains(entry)) {
             return false;
         }
 
-        scoreboard.board.removePlayerFromTeam(player.getName(), team);
+        scoreboard.board.removePlayerFromTeam(entry, team);
         return true;
     }
 
     public boolean hasPlayer(OfflinePlayer player) throws IllegalArgumentException, IllegalStateException {
         Validate.notNull(player, "OfflinePlayer cannot be null");
+        Validate.isTrue(player instanceof Player, CraftScoreboard.warningMessage);
+
+        return this.has(player.getName());
+    }
+
+    public boolean has(String entry) throws IllegalStateException, IllegalArgumentException {
+        Validate.notNull(entry, "Entry cannot be null");
         CraftScoreboard scoreboard = checkState();
 
-        return team.getPlayerNameSet().contains(player.getName());
+        return team.getPlayerNameSet().contains(entry);
     }
 
     @Override
-- 
1.8.5.2 (Apple Git-48)

