From 964d23e3f098c056dd89588a59f86b3ae8479373 Mon Sep 17 00:00:00 2001
From: Jedediah Smith <jedediah@silencegreys.com>
Date: Sun, 20 Apr 2014 19:20:33 -0400
Subject: [PATCH] Skin API


diff --git a/src/main/java/net/minecraft/server/EntityTrackerEntry.java b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
index 4337e74..45c4e12 100644
--- a/src/main/java/net/minecraft/server/EntityTrackerEntry.java
+++ b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
@@ -11,6 +11,8 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 // CraftBukkit start
+import org.bukkit.Skin;
+import org.bukkit.craftbukkit.util.Skins;
 import org.bukkit.entity.Player;
 import org.bukkit.event.player.PlayerVelocityEvent;
 import net.minecraft.util.com.mojang.authlib.GameProfile;
@@ -374,6 +376,11 @@ public class EntityTrackerEntry {
                         GameProfile newProfile = new GameProfile(tracked.getProfile().getId(), tracked.getBukkitEntity().getName(entityplayer.getBukkitEntity()));
                         newProfile.getProperties().putAll(tracked.getProfile().getProperties());
                         ((PacketPlayOutNamedEntitySpawn) packet).b = newProfile;
+
+                        Skin fakeSkin = tracked.getBukkitEntity().getFakeSkin(entityplayer.getBukkitEntity());
+                        if(fakeSkin != null) {
+                            Skins.setProperties(fakeSkin, newProfile.getProperties());
+                        }
                     }
 
                     // CraftBukkit end
@@ -381,6 +388,7 @@ public class EntityTrackerEntry {
                     // Spigot start - protocol patch
                     if ( tracker instanceof EntityPlayer && entityplayer.getBukkitEntity().getPlayerListUpdates())
                     {
+                        entityplayer.playerConnection.sendPacket( PacketPlayOutPlayerInfo.removePlayer( (EntityPlayer) tracker ) );
                         entityplayer.playerConnection.sendPacket( PacketPlayOutPlayerInfo.addPlayer( (EntityPlayer) tracker ) );
                     }
                     // Spigot end
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 950019f..8246bfd 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -25,6 +25,9 @@ import java.util.HashSet;
 import java.util.Arrays;
 
 import org.bukkit.Bukkit;
+import net.minecraft.util.com.mojang.authlib.properties.PropertyMap;
+import org.bukkit.Skin;
+import org.bukkit.craftbukkit.util.Skins;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.inventory.CraftInventoryView;
@@ -903,15 +906,27 @@ public class PlayerConnection implements PacketPlayInListener {
             }
 
         } else if (packet instanceof PacketPlayOutPlayerInfo) {
-            // Translate fake names in player list packets
+            // Translate fake names/skins in player list packets
             Player viewer = this.getPlayer();
             if (viewer != null) {
-                PacketPlayOutPlayerInfo oldPacket = (PacketPlayOutPlayerInfo) packet;
-                Player player = this.server.getPlayerExact(oldPacket.name);
-                String fakeName;
-                if(player != null && (fakeName = player.getFakeName(viewer)) != null) {
-                    oldPacket.name = fakeName;
-                    oldPacket.displayName = fakeName;
+                PacketPlayOutPlayerInfo infoPacket = (PacketPlayOutPlayerInfo) packet;
+                Player player = this.server.getPlayerExact(infoPacket.name);
+                if(player != null) {
+                    String fakeName = player.getFakeName(viewer);
+                    if(fakeName != null) {
+                        infoPacket.name = fakeName;
+                        infoPacket.displayName = fakeName;
+                    }
+
+                    if(this.networkManager.getVersion() >= 20 && infoPacket.action == 0) {
+                        Skin fakeSkin = player.getFakeSkin(viewer);
+                        if(fakeSkin != null) {
+                            PropertyMap properties = new PropertyMap();
+                            properties.putAll(infoPacket.properties);
+                            Skins.setProperties(fakeSkin, properties);
+                            infoPacket.properties = properties;
+                        }
+                    }
                 }
             }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index c74e940..8ba890d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -51,6 +51,7 @@ import org.bukkit.craftbukkit.map.RenderData;
 import org.bukkit.craftbukkit.scoreboard.CraftScoreboard;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.bukkit.craftbukkit.util.Skins;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.Player;
@@ -84,14 +85,17 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     private boolean scaledHealth = false;
     private double healthScale = 20;
     private boolean playerListUpdates = true;
+    private Skin realSkin;
 
     private final Map<CommandSender, String> fakeNames = new WeakHashMap<CommandSender, String>();
     private final Map<CommandSender, String> fakeDisplayNames = new WeakHashMap<CommandSender, String>();
+    private final Map<CommandSender, Skin> fakeSkins = new WeakHashMap<CommandSender, Skin>();
 
     public CraftPlayer(CraftServer server, EntityPlayer entity) {
         super(server, entity);
 
         firstPlayed = System.currentTimeMillis();
+        this.realSkin = this.getSkin();
     }
 
     public GameProfile getProfile() {
@@ -179,6 +183,90 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
+    public boolean hasFakeSkin(CommandSender viewer) {
+        return viewer != null && this.fakeSkins.containsKey(viewer);
+    }
+
+    @Override
+    public Skin getFakeSkin(CommandSender viewer) {
+        return viewer == null ? null : this.fakeSkins.get(viewer);
+    }
+
+    @Override
+    public void setFakeSkin(CommandSender viewer, Skin newSkin) {
+        this.setFakeNameAndSkin(viewer, null, newSkin, false, true);
+    }
+
+    @Override
+    public Skin getSkin() {
+        return Skins.fromProperties(this.getProfile().getProperties());
+    }
+
+    @Override
+    public Skin getSkin(CommandSender viewer) {
+        if(this.hasFakeSkin(viewer)) {
+            return this.getFakeSkin(viewer);
+        } else {
+            return this.getSkin();
+        }
+    }
+
+    @Override
+    public Skin getRealSkin() {
+        return this.realSkin;
+    }
+
+    @Override
+    public void clearFakeSkins() {
+        Set<CommandSender> viewers = new HashSet<CommandSender>(this.fakeSkins.keySet());
+        this.fakeSkins.clear();
+        for(CommandSender viewer : viewers) {
+            this.refreshEntityOnClient(viewer);
+        }
+    }
+
+    @Override
+    public void setSkin(Skin newSkin) {
+        if(newSkin == null) {
+            newSkin = this.realSkin;
+        }
+
+        Skin oldSkin = this.getSkin();
+        if(Objects.equal(oldSkin, newSkin)) {
+            return;
+        }
+
+        Skins.setProperties(newSkin, this.getProfile().getProperties());
+
+        Set<Player> viewers = new HashSet<Player>(this.getServer().getOnlinePlayers());
+        viewers.removeAll(this.fakeSkins.keySet());
+        for(Player viewer : viewers) {
+            this.refreshEntityOnClient(viewer);
+        }
+    }
+
+    @Override
+    public void clearFakeNamesAndSkins() {
+        Set<CommandSender> nameViewers = new HashSet<CommandSender>(this.fakeNames.keySet());
+        Set<CommandSender> allViewers = new HashSet<CommandSender>(this.fakeSkins.keySet());
+        allViewers.addAll(nameViewers);
+
+        for(CommandSender viewer : nameViewers) {
+            this.removeNameOnClient(viewer);
+        }
+
+        this.fakeNames.clear();
+        this.fakeSkins.clear();
+
+        for(CommandSender viewer : allViewers) {
+            if(nameViewers.contains(viewer)) {
+                this.addNameOnClient(viewer);
+            }
+            this.refreshEntityOnClient(viewer);
+        }
+    }
+
+    @Override
     public boolean hasFakeName(CommandSender viewer) {
         return viewer != null && this.fakeNames.containsKey(viewer);
     }
@@ -205,42 +293,63 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void setFakeName(CommandSender viewer, String newName) {
+    public void setFakeName(CommandSender viewer, String name) {
+        this.setFakeNameAndSkin(viewer, name, null, true, false);
+    }
+
+    @Override
+    public void setFakeNameAndSkin(CommandSender viewer, String name, Skin skin) {
+        this.setFakeNameAndSkin(viewer, name, skin, true, true);
+    }
+
+    private void setFakeNameAndSkin(CommandSender viewer, String newName, Skin newSkin, boolean nameChanged, boolean skinChanged) {
         String oldName = this.fakeNames.get(viewer);
-        if(Objects.equal(oldName, newName)) {
-            return;
-        }
+        nameChanged = nameChanged && !Objects.equal(oldName, newName);
+        if(nameChanged) {
+            String realName = this.getName();
 
-        String realName = this.getName();
+            if(newName != null) {
+                if(!realName.equals(this.getPlayerListName())) {
+                    throw new IllegalArgumentException("Cannot set a fake name if player list name has been changed");
+                }
 
-        if(newName != null) {
-            if(!realName.equals(this.getPlayerListName())) {
-                throw new IllegalArgumentException("Cannot set a fake name if player list name has been changed");
-            }
+                if (newName.length() > 16) {
+                    throw new IllegalArgumentException("Fake player names are limited to 16 characters in length");
+                }
 
-            if (newName.length() > 16) {
-                throw new IllegalArgumentException("Fake player names are limited to 16 characters in length");
+                // Do not let the fake name collide with any other player's real name,
+                // or any other fake name set for the same viewer.
+                for(Player other : this.getServer().getOnlinePlayers()) {
+                    if(!other.equals(this) && (newName.equals(other.getName()) || newName.equals(other.getName(viewer)))) {
+                        throw new IllegalArgumentException(newName + " is already in use by another player");
+                    }
+                }
             }
 
-            // Do not let the fake name collide with any other player's real name,
-            // or any other fake name set for the same viewer.
-            for(Player other : this.getServer().getOnlinePlayers()) {
-                if(!other.equals(this) && (newName.equals(other.getName()) || newName.equals(other.getName(viewer)))) {
-                    throw new IllegalArgumentException(newName + " is already in use by another player");
-                }
+            this.removeNameOnClient(viewer);
+
+            if(newName == null) {
+                this.fakeNames.remove(viewer);
+            } else {
+                this.fakeNames.put(viewer, newName);
             }
-        }
 
-        this.removeNameOnClient(viewer);
+            this.addNameOnClient(viewer);
+        }
 
-        if(newName == null) {
-            this.fakeNames.remove(viewer);
-        } else {
-            this.fakeNames.put(viewer, newName);
+        Skin oldSkin = this.fakeSkins.get(viewer);
+        skinChanged = skinChanged && !Objects.equal(oldSkin, newSkin);
+        if(skinChanged) {
+            if(newSkin == null) {
+                this.fakeSkins.remove(viewer);
+            } else {
+                this.fakeSkins.put(viewer, newSkin);
+            }
         }
 
-        this.refreshEntityOnClient(viewer);
-        this.addNameOnClient(viewer);
+        if(nameChanged || skinChanged) {
+            this.refreshEntityOnClient(viewer);
+        }
     }
 
     /**
diff --git a/src/main/java/org/bukkit/craftbukkit/util/Skins.java b/src/main/java/org/bukkit/craftbukkit/util/Skins.java
new file mode 100644
index 0000000..9003fb2
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/util/Skins.java
@@ -0,0 +1,40 @@
+package org.bukkit.craftbukkit.util;
+
+import net.minecraft.util.com.mojang.authlib.properties.Property;
+import net.minecraft.util.com.mojang.authlib.properties.PropertyMap;
+import org.bukkit.Skin;
+
+public abstract class Skins {
+    public static Skin fromProperties(PropertyMap profile) {
+        for(Property property : profile.get("textures")) {
+            if(property.hasSignature()) {
+                return new Skin(property.getValue(), property.getSignature());
+            } else {
+                return new Skin(property.getValue(), null);
+            }
+        }
+        return Skin.EMPTY;
+    }
+
+    public static Property toProperty(Skin skin) {
+        if(skin == null || skin.isEmpty()) return null;
+
+        if(skin.getSignature() != null) {
+            return new Property("textures", skin.getData(), skin.getSignature());
+        } else {
+            return new Property("textures", skin.getData());
+        }
+    }
+
+    public static PropertyMap setProperties(Skin skin, PropertyMap properties) {
+        properties.removeAll("textures");
+        if(skin != null && !skin.isEmpty()) {
+            properties.put("textures", toProperty(skin));
+        }
+        return properties;
+    }
+
+    public static PropertyMap toProperties(Skin skin) {
+        return setProperties(skin, new PropertyMap());
+    }
+}
-- 
1.8.5.2 (Apple Git-48)

