From 4cad3035257f964d412bb9211e85b323a220279d Mon Sep 17 00:00:00 2001
From: mrapple <tony@oc.tc>
Date: Fri, 2 May 2014 20:48:11 -0500
Subject: [PATCH] Cache object to string translations in JsonList

With 1.7 the ban, white, and op lists all use JsonList. While this is nice, when checking if an object is in a JsonList the object is converted to a string. Since most of these objects contain UUIDs and UUID.toString() is a generally expensive call, we need to cache the string representation of the object.

Without this change, player.isOp() and player.hasPermission() are far more expensive than they were in 1.6.

diff --git a/src/main/java/net/minecraft/server/GameProfileBanList.java b/src/main/java/net/minecraft/server/GameProfileBanList.java
index 5657270..954a30f 100644
--- a/src/main/java/net/minecraft/server/GameProfileBanList.java
+++ b/src/main/java/net/minecraft/server/GameProfileBanList.java
@@ -34,7 +34,7 @@ public class GameProfileBanList extends JsonList {
     }
 
     protected String b(GameProfile gameprofile) {
-        return gameprofile.getId().toString();
+        return super.a(gameprofile.getId()); // CraftBukkit - use super method that uses cache
     }
 
     public GameProfile a(String s) {
diff --git a/src/main/java/net/minecraft/server/JsonList.java b/src/main/java/net/minecraft/server/JsonList.java
index 9d1cb33..fc30e60 100644
--- a/src/main/java/net/minecraft/server/JsonList.java
+++ b/src/main/java/net/minecraft/server/JsonList.java
@@ -21,6 +21,12 @@ import net.minecraft.util.org.apache.commons.io.IOUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+// CraftBukkit start
+import com.google.common.cache.LoadingCache;
+import com.google.common.cache.CacheBuilder;
+import com.google.common.cache.CacheLoader;
+// CraftBukkit end
+
 public class JsonList {
 
     protected static final Logger a = LogManager.getLogger();
@@ -29,6 +35,15 @@ public class JsonList {
     private final Map d = Maps.newHashMap();
     private boolean e = true;
     private static final ParameterizedType f = new JsonListType();
+    // CraftBukkit - add cache of object -> string translations
+    LoadingCache<Object, String> pastTranslations = CacheBuilder.newBuilder()
+        .maximumSize(500)
+        .build(new CacheLoader<Object, String>() {
+            public String load(Object obj) {
+                return obj.toString();
+            }
+        }
+    );
 
     public JsonList(File file1) {
         this.c = file1;
@@ -90,7 +105,15 @@ public class JsonList {
     }
 
     protected String a(Object object) {
-        return object.toString();
+        // CraftBukkit start - use cache
+        String result = null;
+
+        try {
+            result = this.pastTranslations.get(object);
+        } catch (Exception e) {}
+
+        return result;
+        // CraftBukkit end
     }
 
     protected boolean d(Object object) {
diff --git a/src/main/java/net/minecraft/server/OpList.java b/src/main/java/net/minecraft/server/OpList.java
index d4d22d8..3c45f10 100644
--- a/src/main/java/net/minecraft/server/OpList.java
+++ b/src/main/java/net/minecraft/server/OpList.java
@@ -30,7 +30,7 @@ public class OpList extends JsonList {
     }
 
     protected String b(GameProfile gameprofile) {
-        return gameprofile.getId().toString();
+        return super.a(gameprofile.getId()); // CraftBukkit - use super method that uses cache
     }
 
     public GameProfile a(String s) {
diff --git a/src/main/java/net/minecraft/server/WhiteList.java b/src/main/java/net/minecraft/server/WhiteList.java
index ea9a75d..616bf9f 100644
--- a/src/main/java/net/minecraft/server/WhiteList.java
+++ b/src/main/java/net/minecraft/server/WhiteList.java
@@ -34,7 +34,7 @@ public class WhiteList extends JsonList {
     }
 
     protected String b(GameProfile gameprofile) {
-        return gameprofile.getId().toString();
+        return super.a(gameprofile.getId()); // CraftBukkit - use super method that uses cache
     }
 
     public GameProfile a(String s) {
-- 
1.8.5.2 (Apple Git-48)

