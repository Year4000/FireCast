From eb2ab08db133409e1995dbdc144e7c1e9eaa0cb7 Mon Sep 17 00:00:00 2001
From: Jedediah Smith <jedediah@silencegreys.com>
Date: Sun, 20 Apr 2014 19:03:10 -0400
Subject: [PATCH] Skin API


diff --git a/src/main/java/org/bukkit/Skin.java b/src/main/java/org/bukkit/Skin.java
new file mode 100644
index 0000000..b11f962
--- /dev/null
+++ b/src/main/java/org/bukkit/Skin.java
@@ -0,0 +1,65 @@
+package org.bukkit;
+
+
+/**
+ * A self-contained skin
+ */
+public class Skin {
+    public static final Skin EMPTY = new Skin(null, null);
+
+    private final String data;
+    private final String signature;
+
+    public Skin(String data, String signature) {
+        this.data = data;
+        this.signature = signature;
+    }
+
+    /**
+     * Return the base64 encoded data for this skin, or null if this
+     * is the empty skin i.e. Steve/Alex
+     */
+    public String getData() {
+        return data;
+    }
+
+    /**
+     * Return the base64 encoded signature for this skin, or null if
+     * this skin has no signature
+     */
+    public String getSignature() {
+        return signature;
+    }
+
+    /**
+     * Return true if this is the empty skin i.e. Steve/Alex
+     */
+    public boolean isEmpty() {
+        return this.data == null;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if(this == o) {
+            return true;
+        }
+        if(!(o instanceof Skin)) {
+            return false;
+        }
+        Skin skin = (Skin) o;
+        if(data != null ? !data.equals(skin.data) : skin.data != null) {
+            return false;
+        }
+        if(signature != null ? !signature.equals(skin.signature) : skin.signature != null) {
+            return false;
+        }
+        return true;
+    }
+
+    @Override
+    public int hashCode() {
+        int result = data != null ? data.hashCode() : 0;
+        result = 31 * result + (signature != null ? signature.hashCode() : 0);
+        return result;
+    }
+}
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index fbe28f0..6e63c94 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -11,6 +11,7 @@ import org.bukkit.Location;
 import org.bukkit.Material;
 import org.bukkit.Note;
 import org.bukkit.OfflinePlayer;
+import org.bukkit.Skin;
 import org.bukkit.Sound;
 import org.bukkit.Statistic;
 import org.bukkit.WeatherType;
@@ -145,6 +146,69 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
     public boolean getPlayerListUpdates();
 
     /**
+     * Test if this Player has a fake skin set for the given viewer
+     */
+    public boolean hasFakeSkin(CommandSender viewer);
+
+    /**
+     * Return the {@link Skin} that the given viewer sees on this player,
+     * or null if the viewer can see this player's real skin.
+     */
+    public Skin getFakeSkin(CommandSender viewer);
+
+    /**
+     * Set the {@link Skin} that the given viewer will see on this player.
+     * If null is given for the skin, any fake skin for the given viewer
+     * will be removed and they will see this player's real skin.
+     */
+    public void setFakeSkin(CommandSender viewer, Skin newSkin);
+
+    /**
+     * Clear any fake {@link org.bukkit.Skin}s set on this player, so that all other
+     * players will see this player's real skin.
+     */
+    public void clearFakeSkins();
+
+    /**
+     * Return the player's real {@link Skin} i.e. the one they have
+     * uploaded to their Minecraft account.
+     */
+    public Skin getRealSkin();
+
+    /**
+     * Return this player's current global {@link Skin}, which is what
+     * other players see as long as there is no fake skin set for them.
+     */
+    public Skin getSkin();
+
+    /**
+     * Return the {@link Skin} that the given viewer sees on this player,
+     * which may be either their current global skin or a fake skin.
+     */
+    public Skin getSkin(CommandSender viewer);
+
+    /**
+     * Set this player's {@link Skin}, which will be visible to
+     * all players who do not have a fake skin set. Passing null
+     * as the skin will reset the player's skin to their real one.
+     */
+    public void setSkin(Skin newSkin);
+
+    /**
+     * Simultaneously set this player's fake name and {@link Skin} for the given viewer.
+     * This method only refreshes the player entity once, whereas calling
+     * {@link #setFakeName} and {@link #setFakeSkin} seperately would refresh it twice.
+     */
+    public void setFakeNameAndSkin(CommandSender viewer, String name, Skin skin);
+
+    /**
+     * Simultaneously clear any fake names or {@link Skin}s set on this player.
+     * This method only refreshes the player entity once, whereas calling
+     * {@link #clearFakeNames} and {@link #clearFakeSkins} seperately would refresh it twice.
+     */
+    public void clearFakeNamesAndSkins();
+
+    /**
      * Set the target of the player's compass.
      *
      * @param loc Location to point to
-- 
1.9.1

